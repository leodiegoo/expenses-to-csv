// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Type {
    INCOME
    EXPENSE
}

enum Status {
    ACTIVE
    INACTIVE
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    password      String
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt

    expenses Expense[]
    Trigger  Trigger[]
    Category Category[]
    Account  Account[]
    Session  Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Expense {
    id          String   @id @default(cuid())
    amount      Float
    date        DateTime
    description String
    category    Category @relation(fields: [categoryId], references: [id])
    categoryId  String
    user        User     @relation(fields: [userId], references: [id])
    userId      String
    type        Type
    status      Status   @default(ACTIVE)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    Trigger   Trigger[]
}

model Category {
    id     String @id @default(cuid())
    name   String @unique
    type   Type
    status Status @default(ACTIVE)

    user   User   @relation(fields: [userId], references: [id])
    userId String

    expenses Expense[]

    Trigger     Trigger[]
    Subcategory Subcategory[]

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model Subcategory {
    id         String    @id @default(cuid())
    name       String    @unique
    status     Status    @default(ACTIVE)
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId String?
}

model Trigger {
    id                String   @id @default(cuid())
    name              String?  @unique
    regularExpression String?
    description       String?
    expense           Expense  @relation(fields: [expenseId], references: [id])
    expenseId         String
    category          Category @relation(fields: [categoryId], references: [id])
    categoryId        String
    user              User     @relation(fields: [userId], references: [id])
    userId            String
    status            Status   @default(ACTIVE)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

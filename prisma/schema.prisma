// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Type {
    INCOME
    EXPENSE
}

enum Status {
    ACTIVE
    INACTIVE
}

model User {
    id       Int       @id @default(autoincrement())
    email    String    @unique
    password String
    name     String?
    expenses Expense[]

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    Trigger   Trigger[]
}

model Expense {
    id          Int      @id @default(autoincrement())
    amount      Float
    date        DateTime
    description String
    category    Category @relation(fields: [categoryId], references: [id])
    categoryId  Int
    user        User     @relation(fields: [userId], references: [id])
    userId      Int
    type        Type
    status      Status   @default(ACTIVE)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    Trigger   Trigger[]
}

model Category {
    id       Int       @id @default(autoincrement())
    name     String    @unique
    type     Type
    status   Status    @default(ACTIVE)
    expenses Expense[]

    Trigger     Trigger[]
    Subcategory Subcategory[]

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}

model Subcategory {
    id         Int       @id @default(autoincrement())
    name       String    @unique
    status     Status    @default(ACTIVE)
    category   Category? @relation(fields: [categoryId], references: [id])
    categoryId Int?
}

model Trigger {
    id                Int      @id @default(autoincrement())
    name              String?  @unique
    regularExpression String?
    description       String?
    expense           Expense  @relation(fields: [expenseId], references: [id])
    expenseId         Int
    category          Category @relation(fields: [categoryId], references: [id])
    categoryId        Int
    user              User     @relation(fields: [userId], references: [id])
    userId            Int
    status            Status   @default(ACTIVE)

    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
}
